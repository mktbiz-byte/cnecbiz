-- =====================================================
-- CNEC BIZ - Payments & Tax Invoice System Update
-- =====================================================

-- =====================================================
-- 1. Update Payments Table
-- =====================================================
ALTER TABLE payments ADD COLUMN IF NOT EXISTS region TEXT; -- 'japan', 'us', 'taiwan'
ALTER TABLE payments ADD COLUMN IF NOT EXISTS bank_transfer_info JSONB; -- Bank transfer details
ALTER TABLE payments ADD COLUMN IF NOT EXISTS receipt_url TEXT; -- Receipt file URL
ALTER TABLE payments ADD COLUMN IF NOT EXISTS confirmed_by UUID REFERENCES auth.users(id); -- Admin who confirmed
ALTER TABLE payments ADD COLUMN IF NOT EXISTS confirmed_at TIMESTAMP WITH TIME ZONE;

-- =====================================================
-- 2. Create Tax Invoices Table
-- =====================================================
CREATE TABLE IF NOT EXISTS tax_invoices (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  payment_id UUID REFERENCES payments(id) ON DELETE CASCADE,
  company_id UUID REFERENCES auth.users(id),
  campaign_id UUID REFERENCES campaigns(id),
  
  -- Company Tax Info
  business_registration_number TEXT NOT NULL,
  company_name TEXT NOT NULL,
  ceo_name TEXT NOT NULL,
  business_address TEXT NOT NULL,
  business_type TEXT, -- ì—…íƒœ
  business_category TEXT, -- ì¢…ëª©
  contact_email TEXT NOT NULL,
  contact_phone TEXT,
  
  -- Invoice Info
  invoice_amount INTEGER NOT NULL,
  invoice_date DATE,
  invoice_number TEXT, -- Generated by admin
  
  -- Status
  status TEXT CHECK (status IN ('requested', 'issued', 'cancelled')) DEFAULT 'requested',
  
  -- File
  invoice_file_url TEXT, -- PDF file URL
  
  -- Admin
  issued_by UUID REFERENCES auth.users(id),
  issued_at TIMESTAMP WITH TIME ZONE,
  
  -- Timestamps
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 3. Create Revenue Statistics View
-- =====================================================
CREATE OR REPLACE VIEW revenue_stats AS
SELECT
  -- Total Revenue
  (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE status = 'completed') as total_revenue,
  
  -- By Region
  (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE status = 'completed' AND region = 'japan') as japan_revenue,
  (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE status = 'completed' AND region = 'us') as us_revenue,
  (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE status = 'completed' AND region = 'taiwan') as taiwan_revenue,
  
  -- By Payment Method
  (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE status = 'completed' AND payment_method = 'stripe') as stripe_revenue,
  (SELECT COALESCE(SUM(amount), 0) FROM payments WHERE status = 'completed' AND payment_method = 'bank_transfer') as bank_transfer_revenue,
  
  -- Counts
  (SELECT COUNT(*) FROM payments WHERE status = 'completed') as total_payments,
  (SELECT COUNT(*) FROM payments WHERE status = 'pending') as pending_payments,
  (SELECT COUNT(*) FROM tax_invoices WHERE status = 'requested') as pending_tax_invoices;

-- =====================================================
-- 4. Indexes
-- =====================================================
CREATE INDEX IF NOT EXISTS idx_payments_region ON payments(region);
CREATE INDEX IF NOT EXISTS idx_payments_payment_method ON payments(payment_method);
CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status);
CREATE INDEX IF NOT EXISTS idx_tax_invoices_company_id ON tax_invoices(company_id);
CREATE INDEX IF NOT EXISTS idx_tax_invoices_status ON tax_invoices(status);
CREATE INDEX IF NOT EXISTS idx_tax_invoices_payment_id ON tax_invoices(payment_id);

-- =====================================================
-- 5. Trigger for Tax Invoices updated_at
-- =====================================================
CREATE TRIGGER update_tax_invoices_updated_at BEFORE UPDATE ON tax_invoices
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- 6. RLS Policies
-- =====================================================

-- Tax Invoices
ALTER TABLE tax_invoices ENABLE ROW LEVEL SECURITY;

-- Users can view their own tax invoices
CREATE POLICY "Users can view their own tax invoices"
  ON tax_invoices FOR SELECT
  USING (auth.uid() = company_id);

-- Users can insert their own tax invoices
CREATE POLICY "Users can insert their own tax invoices"
  ON tax_invoices FOR INSERT
  WITH CHECK (auth.uid() = company_id);

-- Admin can do everything on tax invoices
CREATE POLICY "Admin can do everything on tax_invoices"
  ON tax_invoices FOR ALL
  USING (auth.jwt() ->> 'email' = 'admin@cnecbiz.com');

-- Admin can view all payments
CREATE POLICY "Admin can view all payments"
  ON payments FOR SELECT
  USING (auth.jwt() ->> 'email' = 'admin@cnecbiz.com');

-- Admin can update payments
CREATE POLICY "Admin can update payments"
  ON payments FOR UPDATE
  USING (auth.jwt() ->> 'email' = 'admin@cnecbiz.com');

-- =====================================================
-- Success Message
-- =====================================================
DO $$
BEGIN
  RAISE NOTICE 'âœ… Payments & Tax Invoice System Updated!';
  RAISE NOTICE 'ðŸ’° Revenue statistics view created';
  RAISE NOTICE 'ðŸ“„ Tax invoices table created';
  RAISE NOTICE 'ðŸ”’ RLS policies applied';
  RAISE NOTICE 'ðŸŽ‰ Ready to use!';
END $$;

